#!/bin/sh

set -eu

PROGNAME=$(basename $0)
BASEDIR=$(cd $(dirname $0); pwd)
PROJDIR=$(cd $BASEDIR/..; pwd)

REGS='docker.io'  #REGS='docker.io ghcr.io'
IMAGE=mirakc/tools
# Binaries built on mirakc/buildenv:debian will be reuse for Alpine-based images.
DISTROS='debian'

if [ "$(uname)" != Linux ] || id -nG | grep -q docker; then
  DOCKER='docker'
else
  DOCKER='sudo docker'
fi

NO_CACHE=
PUSH_OPT=
VERSION=

help() {
  cat <<EOF >&2
Update $IMAGE images.

USAGE:
  $PROGNAME [options] [<version>]
  $PROGNAME -h | --help

OPTIONS:
  -h, --help
    Show help.

  --no-cache
    Don't use the Docker buildx cache.

  --push
    Push images.

ARGUMENTS:
  <version>
    Optional version number.

DESCRIPTION:
  This script build $IMAGE images and optionally push them to Docker registries.

  The base image of each $IMAGE:debian will be determined automatically from the
  debian version of the mirakc/buildenv image specified in Dockerfile.tools.

  You have to login to the registries by \`docker login\` before running this
  script with \`--push\`.
EOF
  exit 0
}

log() {
  echo "$1" >&2
}

error() {
  log "ERROR: $1"
  exit 1
}

platforms() {
  case $1 in
    alpine)
      echo 'linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8'
      ;;
    debian)
      echo 'linux/386,linux/amd64,linux/arm/v7,linux/arm64/v8'
      ;;
  esac
}

debian_codename() {
  $DOCKER run --rm mirakc/buildenv:debian-linux-amd64 cat /etc/os-release | \
    grep VERSION_CODENAME | cut -d '=' -f 2
}

# Use a base image other than `scratch` in order to make it possible to run
# commands with `docker run mirakc/tools:<tag> <command>`.
base_image() {
  case $1 in
    alpine)
      echo 'busybox'
      ;;
    debian)
      echo "debian:$(debian_codename)-slim"
      ;;
  esac
}

while [ $# -gt 0 ]
do
  case "$1" in
    '-h' | '--help')
      help
      ;;
    '--no-cache')
      NO_CACHE='--no-cache'
      shift
      ;;
    '--push')
      PUSH_OPT='--push'
      shift
      ;;
    *)
      break
      ;;
  esac
done

if [ $# -gt 0 ]
then
  VERSION="$1"
fi

for DISTRO in $DISTROS
do
  PLATFORMS=$(platforms $DISTRO)
  BASE_IMAGE=$(base_image $DISTRO)
  IMG="$IMAGE:$DISTRO"
  if [ -n "$VERSION" ]
  then
    IMG="$IMG-$VERSION"
  fi
  for REG in $REGS
  do
    log "Updating $REG/$IMG..."
    $DOCKER buildx build \
      -t $REG/$IMG \
      -f $PROJDIR/docker/Dockerfile.tools \
      --platform="$PLATFORMS" \
      --build-arg="DISTRO=$DISTRO" \
      --build-arg="BASE_IMAGE=$BASE_IMAGE" \
      $NO_CACHE $PUSH_OPT $PROJDIR
  done
done
