#!/bin/sh -eu

PROGNAME="$(basename $0)"
BASEDIR="$(cd $(dirname $0); pwd)"
PROJDIR="$(cd $BASEDIR/..; pwd)"
CURRENT=$(cargo metadata --no-deps --format-version=1 | \
            jq -r '.packages[] | select(.name == "mirakc") | .version')

if [ "$(uname)" != Linux ] || id -nG | grep -q docker; then
  DOCKER='docker'
else
  DOCKER='sudo docker'
fi

COMMIT=YES
TAG=YES
PREID=

help() {
    cat <<EOF >&2
USAGE:
  $PROGNAME [--no-commit] [--no-tag] [--preid <preid>] (major|minor|patch)
  $PROGNAME -h | --help

OPTIONS:
  -h, --help

ARGUMENTS:
  major
    Update the major version.

  minor
    Update the minor version.

  patch
    Update the patch version.
EOF
    exit 0
}

log() {
  echo "$1" >&2
}

error() {
  log "ERROR: $1"
  exit 1
}

cleanup() {
  find $PROJDIR -name '*.sed.backup' | xargs rm -f
}

while [ $# -gt 0 ]
do
  case "$1" in
    '-h' | '--help')
      help
      ;;
    '--no-commit')
      COMMIT=NO
      shift
      ;;
    '--no-tag')
      TAG=NO
      shift
      ;;
    '--preid')
      PREID=$2
      shift 2
      ;;
    'major' | 'minor' | 'patch')
      break
      ;;
    *)
      help
      ;;
  esac
done

trap cleanup EXIT

if [ -n "$PREID" ]
then
  OPTIONS="-i pre$1 --preid $PREID"
else
  OPTIONS="-i $1"
fi

VERSION=$(deno run npm:semver $CURRENT $OPTIONS)

if [ "$COMMIT" = YES ]
then
  log "Pulling changes from origin..."
  git pull
fi

for MANIFEST in $(find $PROJDIR -name Cargo.toml)
do
  if grep -e '^version = "0.0.0"$' $MANIFEST >/dev/null 2>&1
  then
    log "Skip $MANIFEST"
  else
    log "Bumping the version in $MANIFEST to $VERSION..."
    sed -i'.sed.backup' -e "s/^version = .*/version = \"$VERSION\"/" $MANIFEST
  fi
done

# We assume that build never fails.

# Update only packages defined in the workspace.
cargo update -w

if [ "$COMMIT" = YES ]
then
  git add .
  git commit -m "release: bump version to $VERSION"
fi

# TODO: Genereate CHANGELOG.md

if [ "$TAG" = YES ]
then
  log "Making an annotated tag for $VERSION..."
  git tag -a "$VERSION" -m "release: $VERSION"
fi

cat <<EOF >&2
Done.

Run the following commands after confirmation:

  git push -u origin $(git rev-parse --abbrev-ref HEAD)
EOF

if [ "$TAG" = YES ]
then
  echo "  git push origin $VERSION"
fi
